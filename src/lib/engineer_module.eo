struct @extern Engineer_Component         {}
struct @extern Engineer_Component_Class   {}
struct @extern Engineer_Component_History {}

type   @extern Index:       uint64;
type   @extern ClassID:     uint64;
type   @extern EntityID:    uint64;
type   @extern ComponentID: uint64;
type   @extern EventID:     uint64;
type   @extern ClassLabel:  string;
type   @extern EventLabel:  string;
type   @extern StateLabel:  string;

class Engineer.Module(Efl.Object)
{
   implements
   {
      Efl.Object.constructor;
      Efl.Object.finalize;
      Efl.Object.destructor;
   }

   methods
   {
      efl_object_constructor
      {
         return: Efl.Object;
      }

      efl_object_finalize
      {
         return: Efl.Object;
      }

      efl_object_destructor
      {
      }

      update
      {
         return: bool;
      }

      dispatch
      {
         params
         {
            @in buffer: ptr(Engineer_Component);
            @in inbox:  ptr(Eina.Inarray);
         }
      }

      cache_sizeof
      {
         return: uint64;
      }

      cache_read
      {
         params
         {
            @in buffer: ptr(Engineer_Component);
            @in index:  Index;
         }
      }

      cache_write
      {
         params
         {
            @in buffer: ptr(Engineer_Component);
            @in index:  Index;
         }
      }

      event_sizeof
      {
         params
         {
            @in type: EventID;
         }
         return: uint64;
      }

      component_factory
      {
         params
         {
            @in newid:    ComponentID;
            @in parent:   EntityID;
            @in template: ptr(Engineer_Component);
         }
         return: bool;
      }

      component_index_set
      {
         params
         {
            @in componentid: ComponentID;
            @in index:       Index;
         }
      }

      component_index_get
      {
         params
         {
            @in componentid: ComponentID;
         }
         return: Index;
      }

      component_parent_set
      {
         params
         {
            @in target:    ComponentID;
            @in newparent: EntityID;
         }
      }

      component_parent_get
      {
         params
         {
            @in target: ComponentID;
            @in offset: uint64;
         }
         return: EntityID;
      }

      component_siblingnext_set
      {
         params
         {
            @in target:     ComponentID;
            @in newsibling: ComponentID;
         }
      }

      component_siblingnext_get
      {
         params
         {
            @in target: ComponentID;
            @in offset: uint64;
         }
         return: ComponentID;
      }

      component_siblingprev_set
      {
         params
         {
            @in target:     ComponentID;
            @in newsibling: ComponentID;
         }
      }

      component_siblingprev_get
      {
         params
         {
            @in target: ComponentID;
            @in offset: uint64;
         }
         return: ComponentID;
      }

      component_state_get
      {
         params
         {
            @in target: ComponentID;
            @in key:    StateLabel;
         }
         return: void_ptr;
      }

   }

}
