// 32 arrays, each descrbing a breadth first morton curve.
// Call it depth[32];

each node contains 6 index references to it's neighbors.

depth[0] // Up to x8 fields. 1 byte for octree code. Wastage: 5 bits per (4 bytes struct padded)
{
   000 | Left, Right, Up, Down, Near, Far | Payload
   001 | Left, Right, Up, Down, Near, Far | Payload
}

depth[1]  // Up to x64 fields. 1 byte for octree code. Wastage: 2 bits per.
{
   100 000
   100 100
}

depth[2]  // Up to x512 fields. 2 bytes for octree code. Wastage: 7 bits per.
{
   100 000 000
   100 100 000
}

depth[3]  // Up to x4096 fields. 2 bytes for octree code. Wastage: 4 bits per.
{
   100 000 000 000
   100 100 000 000
}

depth[4]  // 2 bytes for octree code. Wastage: 1 bit per.
depth[5]  // 3 bytes for octree code. Wastage: 6 bits per.
depth[6]  // 3 bytes for octree code. Wastage: 3 bits per.
depth[7]  // 3 bytes for octree code. Wastage: 0 bits per.

/*** Its Cyclical! And the wastage seems to be biased towards the small end! ***/

depth[8]  // 4 bytes for octree code. Wastage: 5 bits per.
depth[9]  // 4 bytes for octree code. Wastage: 2 bits per.


depth[10] // 5 bytes for octree code. Wastage: 7 bits per. (8 bytes struct padded)
depth[11] // 5 bytes for octree code. Wastage: 4 bits per.

depth[12] // 5 bytes for octree code, Wastage: 1 bit per.
depth[13] // 6 bytes for octree code, Wastage: 6 bits per.
depth[14] // 6 bytes for octree code, Wastage: 3 bits per.
depth[15] // 6 bytes for octree code, Wastage: 0 bits per.

// Note both the regular a->a-->b->b->b-->c->c->c byte usage cycle and
//    the 5->2->7->4-->1->6->3->0 Wastage cycle.

depth[16] // 7 bytes for octree code. Wastage: 5 bits per.
depth[17] // 7 bytes for octree code. Wastage: 2 bits per.
depth[18] // 8 bytes for octree code. Wastage: 7 bits per.
depth[19] // 8 bytes for octree code. Wastage: 4 bits per.

depth[20] // 8 bytes for octree code, Wastage: 1 bit per.


// Its really quite nice, isnt it?
// Unfortunatlely, due to struct packing, savings wont be this good in the real world.
// Realistically, each additional 8 levels takes space in 32 bit int slices, not in single byte ones.

depth[21] // 9 bytes for octree code, Wastage: 6 bits per. (12 bytes struct padded)
depth[22] // 9 bytes for octree code, Wastage: 3 bits per.
depth[23] // 9 bytes for octree code, Wastage: 0 bits per.

depth[24] // 10 bytes for octree code. Wastage: 5 bits per.
depth[25] // 10 bytes for octree code. Wastage: 2 bits per.
depth[26] // 11 bytes for octree code. Wastage: 7 bits per.
depth[27] // 11 bytes for octree code. Wastage: 4 bits per.

depth[28] // 11 bytes for octree code, Wastage: 1 bit per.
depth[29] // 12 bytes for octree code, Wastage: 6 bits per.
depth[30] // 12 bytes for octree code, Wastage: 3 bits per.
depth[31] // 12 bytes for octree code, Wastage: 0 bits per.

0 - 9; 10 - 20; 21 - 31;

if we use the top 5 array bits for depth information, that leaves 134,217,728 (2^27) addresses per level.
