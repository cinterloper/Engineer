struct Engineer_Scene_Entity
{
   id:             uint;
   name:           stringshare;

   parent:         uint;
   siblingnext:    uint;
   siblingprev:    uint;
   firstcomponent: uint;
   firstentity:    uint;
}

struct Engineer_Scene_Component
{
   id:             uint;
   name:           stringshare;

   type:           uint;

   parent:         uint;
   siblingnext:    uint;
   siblingprev:    uint;
}

class Engineer.Scene(Efl.Object)
{
   implements
   {
      Efl.Object.constructor;
      Efl.Object.finalize;
      Efl.Object.destructor;
   }

   constructors
   {
   }

   events
   {
      sector_iterate_cb;
   }

   methods
   {
      efl_object_constructor
      {
         return: Efl.Object;
      }

      efl_object_destructor
      {
      }

      @property name
      {
         get { return: string; }
         set
         {
            values
            {
               name: string;
            }
         }
      }

      iterate
      {
         return: bool;
      }

      iterate_module
      {
         params
         {
            @in key: ptr(uint);
         }
         return: bool;
      }

      iterate_entity
      {
         params
         {
            @in key: void_ptr;
            @in data: void_ptr;
         }
         return: bool;
      }

      iterate_component
      {
         params
         {
            @in key: void_ptr;
            @in data: void_ptr;
         }
         return: bool;
      }

      timeline_adjust
      {
      }

      timeline_push
      {
      }

      timeline_pop
      {
      }

      entity_create
      {
         params
         {
            @in parent: uint;
            @in name: string;
         }
         return: uint;
      }

      entity_destroy
      {
         params
         {
            @in target: uint;
         }
      }

      entity_dispose
      {
         params
         {
            @in target: uint;
         }
      }

      entity_load
      {
         params
         {
            @in target: uint;
         }
      }

      entity_save
      {
         params
         {
            @in target: uint;
         }
      }

      entity_lookup
      {
         params
         {
            @in target: uint;
         }
         return: ptr(Engineer_Scene_Entity);
      }

      entity_data_swap
      {
         params
         {
            @in targeta: uint;
            @in targetb: uint;
         }
      }

      entity_parent_get
      {
         params
         {
            @in target: uint;
         }
         return: uint;
      }

      entity_parent_set
      {
         params
         {
            @in target: uint;
            @in parent: uint;
         }
      }

      entity_sibling_swap
      {
         params
         {
            @in siblinga: uint;
            @in siblingb: uint;
         }
      }

      entity_children_get
      {
         params
         {
            @in target: uint;
         }
         return: ptr(Eina.Inarray);
      }

      entity_components_get
      {
         params
         {
            @in target: uint;
         }
         return: ptr(Eina.Inarray);
      }

      component_create
      {
         params
         {
            @in type: stringshare;
            @in parent: uint;
         }
         return: uint;
      }

      component_destroy
      {
         params
         {
            @in target: uint;
         }
      }

      component_dispose
      {
         params
         {
            @in target: uint;
         }
      }

      component_load
      {
         params
         {
            @in target: uint;
         }
      }

      component_save
      {
         params
         {
            @in target: uint;
         }
      }

      component_lookup
      {
         params
         {
            @in target: uint;
         }
         return: ptr(Engineer_Scene_Component);
      }

      component_data_swap
      {
         params
         {
            @in targeta: uint;
            @in targetb: uint;
         }
      }

      component_parent_get
      {
         params
         {
            @in target: uint;
         }
         return: uint;
      }

      component_parent_set
      {
         params
         {
            @in target: uint;
            @in parent: uint;
         }
      }

      component_sibling_swap
      {
         params
         {
            @in siblinga: uint;
            @in siblingb: uint;
         }
      }

   }

}
